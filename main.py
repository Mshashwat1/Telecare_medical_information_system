print("phase 1 mutual authentication between H & C")
import hashlib
m=hashlib.sha256()
IDh=123
IDP=234
NID=678
a=24
b=12
TC1=10
TC2=17
m.update(b"123")
m.update(b"24")
m.update(b"12")
m.update(b"17")
S1=m.hexdigest()
print(S1)
print(len(S1))
m=hashlib.sha256()
m.update(b"24")
m.update(b"17")
m.update(b"123")
K1=m.hexdigest()
print(K1)
print(len(K1))
data="43d454ea3a522f27311a4d5b9b0d2a3810686d3d412335d903a3483a0453bc67"
t=int("43d454ea3a522f27311a4d5b9b0d2a3810686d3d412335d903a3483a0453bc67",16)
print(int(t))
T=int(t^b)
print(T)
m=hashlib.sha256()
m.update(b"123")

m.update(b"24")
m.update(b"17")
k1=m.hexdigest()
print(k1)
t1=int("43d454ea3a522f27311a4d5b9b0d2a3810686d3d412335d903a3483a0453bc67",16)
print(int(t1))
b=int(T^t1)
print(b)
m=hashlib.sha256()
m.update(b"123")
m.update(b"24")
m.update(b"12")
m.update(b"17")
s1=m.hexdigest()
print(s1)
print("true:", s1 == S1)
from hashlib import blake2b
from cryptography.fernet import Fernet
IDh=123
a=24
b=12
K1=30680118494274437551792679431735796632446625348260239556052901998170312260711
m = blake2b(digest_size=21)
m.update(b"123")
m.update(b"24")
m.update(b"12")
m.update(b"30680118494274437551792679431735796632446625348260239556052901998170312260711")
SKhc=m.hexdigest()
print(SKhc)
print(len(SKhc))

from hashlib import blake2b
from cryptography.fernet import Fernet
IDh=123
IDp=234
NID=678
m = blake2b(digest_size=21)
m.update(b"123")
m.update(b"234")
m.update(b"678")
K2=m.hexdigest()
print(K2)
print(len(K2))
key1=K2+'0'+'='
key =key1
print (key )
input_file= 'Mh.txt'
output_file='encrypted'
with open(input_file,'rb') as f1:Mh=f1.read()
fernet=Fernet(key)
encrypted=fernet.encrypt(Mh)
with open(output_file,'wb')as f1:f1.write(encrypted)
Ch=encrypted
print(Ch)
from Crypto.PublicKey import RSA
keyPair = RSA.generate(bits=1024)
print(f"Public key: (n={hex(keyPair.n)}, e={hex(keyPair.e)})")
print(f"Private key: (n={hex(keyPair.n)}, d={hex(keyPair.d)})")
Mh=b'IDp-patient name is Rahul kumar, Age is 34 years, resides in prayagraj, Datap-patient has symptoms of fever and body pain'

print("signature of Mh in HC")
from hashlib import sha512
hash1 = int.from_bytes(sha512(Mh).digest(), byteorder='big')
signature1 = pow(hash1, keyPair.d, keyPair.n)
print("Signature of Mh in HC:", hex(signature1))
skhc=int("550dbfd63e5ea08cb37d1e970bb03dd4238f4c6d83",16)
print(int(skhc))
sigh=int("0x643b5e981ae4ec95be4ac63691f98e8597d5b0e16c73c411565ac3d1a51c9ee5b93ac5f38b8528bbe9b830c12aa30d83305a53ce8d74caca7b2a9c6d76096e82f711641f899fa289fb23a663b364b4da2aa3efe29c68ed037ce4d25d2e857385fce2002b0fa867b6fbe88a8294975caa6b86d2f198181bb7f49d1e354ae9a330",16)
print(int(sigh))
Ch=("gAAAAABeO_gk_gBgTekC6eQR0qbB6LC1DuYHudyASRr5GbFdE3PP21Me_ArcHFSWp_oLvhry_dPhfCDbthrmT2HtM0MeaWGKyexQp4ANIaXUXXh_gdfdPrNmi3zlCZ5Ya-qv6MMJUHbeGaPy1rA2nHkkglfnQBvEKbObZD5O4i5RG65IMqX6bS-TJJo3mDpGuSZn6n38Fgohf59EE3JhzlwWQdn_YWwR419kRGcRu9uqyqQrdsBUTJc=")

for i in Ch:print(ord(i),end='')
m=hashlib.sha256()
IDd=22
TH3=99
m.update(b"124306134158732854508798297958785133192958230424963")
m.update(b"10365656565656610179951031079510366103841011076754101818248113986654766749681178972117100121658382114537198701006951808050497710195651149972708387112951117611810411412195100801041026768981161041141098450721167748771019787717512110112081112526578739788858888104951031001021008011478109105511221086790538997451131185477777485729810171978012149114655011072107107103108102110816611869759879989068537952105538271545373771138854988345847474111511096811271117839011054110515670103111104102535769695174104122108119878110011095898711982524957107827199821175711711312111381114100115668584749961")
m.update(b"22")
m.update(b
m.update(b"99")
S2=m.hexdigest()
print(S2)
key2=SKhc+'0'+'='
key =key2
print (key )
print("Msg is encrypted")
input_file= 'Msg.txt'
output_file='encrypted1'
with open(input_file,'rb') as f:Msg=f.read()
fernet=Fernet(key)
encrypted1=fernet.encrypt(Msg)
with open(output_file,'wb')as f:f.write(encrypted1)
E2=encrypted1
m = blake2b(digest_size=21)
m.update(b"123")
m.update(b"24")
m.update(b"12")
m.update(b"30680118494274437551792679431735796632446625348260239556052901998170312260711")
SKhc=m.hexdigest()
print(SKhc)
key2=SKhc+'0'+'='
key =key2
print (key )
print("Ch which is encrypted now it is decrypted")

input_file= 'encrypted1'
output_file='decrypted1'
with open(input_file,'rb') as f:encrypted1=f.read()
fernet=Fernet(key)
decrypted1=fernet.decrypt(encrypted1)
with open(output_file,'wb')as f:f.write(decrypted1)
f.close()
m=hashlib.sha256()
m.update(b"124306134158732854508798297958785133192958230424963")
m.update(b"10365656565656610179951031079510366103841011076754101818248113986654766749681178972117100121658382114537198701006951808050497710195651149972708387112951117611810411412195100801041026768981161041141098450721167748771019787717512110112081112526578739788858888104951031001021008011478109105511221086790538997451131185477777485729810171978012149114655011072107107103108102110816611869759879989068537952105538271545373771138854988345847474111511096811271117839011054110515670103111104102535769695174104122108119878110011095898711982524957107827199821175711711312111381114100115668584749961")
m.update(b"22")
m.update(b
m.update(b"99")
s2=m.hexdigest()
print(s2)
print("true:", s2 == S2)
print("phase 2 mutual authentication between P and C ")

m=hashlib.sha256()
TC4=67
TP1=54
TC5=23
c=88
d=44
Sni=33
m.update(b"123")
m.update(b"44")
X=m.hexdigest()
print(X)
X1=int("8e2ceecbcb5c7a306792a3104b9b249f16e36d70da1ed02c7ba948690a0819b3",16)
print(int(X1))
I=int(Sni^X1)
print(I)
J=int(c^Sni)
print(J)
m=hashlib.sha256()
m.update(b"10365656565656610179951031079510366103841011076754101818248113986654766749681178972117100121658382114537198701006951808050497710195651149972708387112951117611810411412195100801041026768981161041141098450721167748771019787717512110112081112526578739788858888104951031001021008011478109105511221086790538997451131185477777485729810171978012149114655011072107107103108102110816611869759879989068537952105538271545373771138854988345847474111511096811271117839011054110515670103111104102535769695174104122108119878110011095898711982524957107827199821175711711312111381114100115668584749961")
m.update(b"88")
m.update(b"44")
m.update(b"33")
m.update(b"70385242325158926154830857108314963963126293098954094133038130711251883674522985119294479129630699049409147361636341256268626263607521973965588434333609614728022377284761688848439823048887592405782810963355706683381785476743289838361689999770793623431398209634096235677067383389328997872230331367206892970800")
m.update(b"23")

S3=m.hexdigest()
print(S3)
m=hashlib.sha256()
m.update(b"123")
m.update(b"44")
x1=m.hexdigest()
print(x1)
Sni=int(I^X1)
print(Sni)
c=int(J^Sni)
print(c)
m=hashlib.sha256()
m.update(b"10365656565656610179951031079510366103841011076754101818248113986654766749681178972117100121658382114537198701006951808050497710195651149972708387112951117611810411412195100801041026768981161041141098450721167748771019787717512110112081112526578739788858888104951031001021008011478109105511221086790538997451131185477777485729810171978012149114655011072107107103108102110816611869759879989068537952105538271545373771138854988345847474111511096811271117839011054110515670103111104102535769695174104122108119878110011095898711982524957107827199821175711711312111381114100115668584749961")
m.update(b"88")
m.update(b"44")
m.update(b"33")
m.update(b"70385242325158926154830857108314963963126293098954094133038130711251883674522985119294479129630699049409147361636341256268626263607521973965588434333609614728022377284761688848439823048887592405782810963355706683381785476743289838361689999770793623431398209634096235677067383389328997872230331367206892970800")
m.update(b"23")
s3=m.hexdigest()
print(s3)
print("true:", s3 == S3)
from hashlib import blake2b
from cryptography.fernet import Fernet
m=blake2b(digest_size=21)

m.update(b"123")
m.update(b"234")
m.update(b"678")
K3=m.hexdigest()
print(K3)
print(len(K3))
key3=K3+'0'+'='
key=key3
print("true:", key3 == key1)
print (key )
print(key1)
print("decryption of encrypted Mh")
input_file='encrypted'
output_file='decrypted'
with open(input_file,'rb') as f2:encrypted=f2.read()
fernet=Fernet(key)
decrypted=fernet.decrypt(encrypted)
with open(output_file,'wb')as f2:f2.write(decrypted)
f2.close()
print("verify signature Mh in HC")
from hashlib import sha512
hash2 = int.from_bytes(sha512(Mh).digest(), byteorder='big')
hashFromSignature1 = pow(signature1, keyPair.e, keyPair.n)
print("Signature verfication of HC:", hash2 == hashFromSignature1)
from hashlib import blake2b
from cryptography.fernet import Fernet
IDp=234
IDd=22
NID=678

Sni=33
TD3=212
m = blake2b(digest_size=21)
m.update(b"234")
m.update(b"22")
m.update(b"33")
K4=m.hexdigest()
print(K4)
print(len(K4))
key4=K4+'0'+'='
key =key4
print (key )
print("encryption of MhMb")
input_file= 'MhMb.txt'
output_file='encrypted2'
with open(input_file,'rb') as f:MhMb=f.read()
fernet=Fernet(key)
encrypted2=fernet.encrypt(MhMb)
with open(output_file,'wb')as f:f.write(encrypted2)
Cp=encrypted2
print(Cp)
from Crypto.PublicKey import RSA
keyPair = RSA.generate(bits=1024)
print(f"Public key: (n={hex(keyPair.n)}, e={hex(keyPair.e)})")
print(f"Private key: (n={hex(keyPair.n)}, d={hex(keyPair.d)})")
Mb=b'Mb-body sensor report says that patient has symptoms of typhoid'
print("signature of Mb in PC")
from hashlib import sha512
hash3 = int.from_bytes(sha512(Mb).digest(), byteorder='big')

signature3 = pow(hash3, keyPair.d, keyPair.n)
print("Signature:", hex(signature3))
Cp=("gAAAAABePPl5blve_uJo2y6i8jclp30PU9y1Lul1UYdPWlZKKSUHmvDqy1fb4_jycbT8RyhUvpF42GFnmfUApyLOmN0KHnl_X1ERpEcf3cAE7PtCRL0BvtEirMbepRO8vtnDqFEiJVoa2NENqhwDJywmtSg_IX3qMfe1Gn38skTY_ymSqwpgvdznoWKA-4v-mK_4h8mjmze_mTP14nDEeKfUJc6Lk7LPSXfOZmpwcyCLuQQfGM3XKcdNN-Dbu7ocNpLZM8KKAPWSl_Wxcc_3cZDAI2LwmqWD7aRdT4Sl34ONeNptPcrHPcz2DWaoM66IcXoC1A0SVVsH")
for i in Cp:print(ord(i),end='')
cp=103656565656566101808010853981081181019511774111501215410556106991081125148808557121497611710849858910080871089075758385721091186811312149102985295106121999884568212110485118112705250717011010910285651121217679109784875721101089588496982112699910251996569558011667827648661181166910511477981011128279561181161106811370691057486111975078697811310411968741211191091168310395738851113771021014971110515611510784899512110983113119112103118100122110111877565455211845109759552104561091061091221019510984804952110686910175102857499547610755768083881027990109112119991216776117818110271775188759910078784568981175511199781127690775675756580878310895871209999955199906865735076119109113876855978210084528310851527978101781121168099114728099122506887971117754547399881116749654883868611572
Cq=int(cp^NID)
print(Cq)
sigp=int("0x14cb0eab97c996b9452c615041ff3de8ce4b60899d4c978fc46107a5bcfca9598e6fc1ac261c6bb8c89f02afee94fc774e0d37499c94c18f0e9c717cfd15be7822924c6eb70f021423deb25f71bf1846a6287c87f4368764e8c7f987b37586b8f5ec85983ff4bc89e1ca6862c1ccb5d2389aca5e142c373ca3c8e7ae6e4ac952",16)
print(int(sigp))
Sq=int(sigp^NID)
print(Sq)
k4=int("f7a40eac1c8736b174045a869ecf22e7ba4110d729",16)
print(int(k4))
import hashlib
m=hashlib.sha256()
m.update(b"361927506110601726206196709573845748696686491916073")
m.update(b"88")
m.update(b"44")

m.update(b"103656565656566101808010853981081181019511774111501215410556106991081125148808557121497611710849858910080871089075758385721091186811312149102985295106121999884568212110485118112705250717011010910285651121217679109784875721101089588496982112699910251996569558011667827648661181166910511477981011128279561181161106811370691057486111975078697811310411968741211191091168310395738851113771021014971110515611510784899512110983113119112103118100122110111877565455211845109759552104561091061091221019510984804952110686910175102857499547610755768083881027990109112119991216776117818110271775188759910078784568981175511199781127690775675756580878310895871209999955199906865735076119109113876855978210084528310851527978101781121168099114728099122506887971117754547399881116749654883868611572")
m.update(b"14601476402459191508433992917217299100335339121905375906628991514505719810764823047554001755912058152466428452394988582609034785353903753539220724121164611462190054870345252091206651153755124717397054552817805090452874453283449772121771142745951422797142704823842387913688556192496294026338873182186088614226")
m.update(b"23")
S4=m.hexdigest()
print(S4)
Cp=int(Cq^NID)
print(Cp)
sigp=(Sq^NID)
print(sigp)
m=hashlib.sha256()
m.update(b"361927506110601726206196709573845748696686491916073")
m.update(b"88")
m.update(b"44")
m.update(b"103656565656566101808010853981081181019511774111501215410556106991081125148808557121497611710849858910080871089075758385721091186811312149102985295106121999884568212110485118112705250717011010910285651121217679109784875721101089588496982112699910251996569558011667827648661181166910511477981011128279561181161106811370691057486111975078697811310411968741211191091168310395738851113771021014971110515611510784899512110983113119112103118100122110111877565455211845109759552104561091061091221019510984804952110686910175102857499547610755768083881027990109112119991216776117818110271775188759910078784568981175511199781127690775675756580878310895871209999955199906865735076119109113876855978210084528310851527978101781121168099114728099122506887971117754547399881116749654883868611572")
m.update(b"14601476402459191508433992917217299100335339121905375906628991514505719810764823047554001755912058152466428452394988582609034785353903753539220724121164611462190054870345252091206651153755124717397054552817805090452874453283449772121771142745951422797142704823842387913688556192496294026338873182186088614226")

m.update(b"23")
s4=m.hexdigest()
print(s4)
print("true:", s4 == S4)
print("phase 3 mutual authentication between D & C")
r=111
TD1=121
s=131
Sni=33
Y=int(s^Sni)
print(Y)
m=hashlib.sha256()
m.update(b"234")
m.update(b"22")
m.update(b"70385242325158926154830857108314963963126293098954094133038130711251883674522985119294479129630699049409147361636341256268626263607521973965588434333609614728022377284761688848439823048887592405782810963355706683381785476743289838361689999770793623431398209634096235677067383389328997872230331367206892970800")
m.update(b"14601476402459191508433992917217299100335339121905375906628991514505719810764823047554001755912058152466428452394988582609034785353903753539220724121164611462190054870345252091206651153755124717397054552817805090452874453283449772121771142745951422797142704823842387913688556192496294026338873182186088614226")
m.update(b"111")
m.update(b"131")
m.update(b"103656565656566101808010853981081181019511774111501215410556106991081125148808557121497611710849858910080871089075758385721091186811312149102985295106121999884568212110485118112705250717011010910285651121217679109784875721101089588496982112699910251996569558011667827648661181166910511477981011128279561181161106811370691057486111975078697811310411968741211191091168310395738851113771021014971110515611510784899512110983113119112103118100122110111877565455211845109759552104561091061091221019510984804952110686910175102857499547610755768083881027990109112119991216776117818110271775188759910078784568981175511199781127690775675756580878310895871209999955199906865735076119109113876855978210084528310851527978101781121168099114728099122506887971117754547399881116749654883868611572")
m.update(b"23")
S5=m.hexdigest()

print(S5)
s1=int(Y^Sni)
print(s1)
m=hashlib.sha256()
m.update(b"234")
m.update(b"22")
m.update(b"70385242325158926154830857108314963963126293098954094133038130711251883674522985119294479129630699049409147361636341256268626263607521973965588434333609614728022377284761688848439823048887592405782810963355706683381785476743289838361689999770793623431398209634096235677067383389328997872230331367206892970800")
m.update(b"14601476402459191508433992917217299100335339121905375906628991514505719810764823047554001755912058152466428452394988582609034785353903753539220724121164611462190054870345252091206651153755124717397054552817805090452874453283449772121771142745951422797142704823842387913688556192496294026338873182186088614226")
m.update(b"111")
m.update(b"131")
m.update(b"103656565656566101808010853981081181019511774111501215410556106991081125148808557121497611710849858910080871089075758385721091186811312149102985295106121999884568212110485118112705250717011010910285651121217679109784875721101089588496982112699910251996569558011667827648661181166910511477981011128279561181161106811370691057486111975078697811310411968741211191091168310395738851113771021014971110515611510784899512110983113119112103118100122110111877565455211845109759552104561091061091221019510984804952110686910175102857499547610755768083881027990109112119991216776117818110271775188759910078784568981175511199781127690775675756580878310895871209999955199906865735076119109113876855978210084528310851527978101781121168099114728099122506887971117754547399881116749654883868611572")
m.update(b"23")
s5=m.hexdigest()
print(s5)
print("true:", s5 == S5)
from hashlib import blake2b
from cryptography.fernet import Fernet
IDp=234
IDd=22
NID=678
Sni=33

m = blake2b(digest_size=21)
m.update(b"234")
m.update(b"22")
m.update(b"33")
K5=m.hexdigest()
print(K5)
print(len(K5))
key5=K5+'0'+'='
key =key5
print (key )
print("decryption of encrypted MhMb")
input_file= 'encrypted2'
output_file='decrypted2'
with open(input_file,'rb') as f:encrypted2=f.read()
fernet=Fernet(key)
decrypted2=fernet.decrypt(encrypted2)
with open(output_file,'wb')as f:f.write(decrypted2)
f.close()
print("verify signature of Mh in DC")
from hashlib import sha512
hash3 = int.from_bytes(sha512(Mh).digest(), byteorder='big')
print("Signature verfication of Mh in DC:", hash3 == hashFromSignature1)
#RSA verify signature of Mb in DC
from hashlib import sha512
hash4 = int.from_bytes(sha512(Mb).digest(), byteorder='big')
hashFromSignature3 = pow(signature3, keyPair.e, keyPair.n)
print("Signature verification of Mb in DC:", hash4== hashFromSignature3)
Md=b'The only effective treatment for typhoid is antibiotics which is ciprofloxacin and ceftriazone'
key =key5

print (key )
print("encrption of MhMbMd")
input_file= 'MhMbMd.txt'
output_file='encrypted3'
with open(input_file,'rb') as f:MhMbMd=f.read()
fernet=Fernet(key)
encrypted3=fernet.encrypt(MhMbMd)
with open(output_file,'wb')as f:f.write(encrypted3)
Cd=encrypted3
print(Cd)
print("Signature of Md in DC")
from hashlib import sha512
hash5 = int.from_bytes(sha512(Md).digest(), byteorder='big')
signature4 = pow(hash5, keyPair.d, keyPair.n)
print("Signature of Md in DC:", hex(signature4))
sigd=int("0x8bf902d19a1899b2266291f19f6ef570a1cbf45c4cca01c1646d5ae782b75c02592bbd39b9903ddb9fa8265a9ec506a1a9d775cb6ae68576f593d5bc75cde70c769ca29ddf62db4d4c528a0107a9007ef49da717d84258a6a9f6e2ae622fcffc9e6d61f596ed2dedcdc1dd420c721959dd3221db68082aa838498998b110fb66",16)
print(int(sigd))
Cd=("gAAAAABePQvKzCf7nA8yOkUlmG7Hv1K3vzXzJvtbz3D0YdxQYwMTus_wGqnXyX6GwoCewVHP5cCAxGWLf_tOi-cHno4HMkbLExGMImhh9fOUMKpBbJpb5VhmqksUQLqY0D2TEYl7Vc_4VPnnj_tad9KdbOyZutYS96y_rScQdf_9NQmomw3sdui09HFMx8QGNBviHwlHemRYYbWc9LSmldliOt-SiJQqOur4zupxCNHpxWNb64oifJPUpnNnYjaJ4uGhCmhF3rxzyoOU-85dyf0IvKR8hxa8JihPupC_LFeeWLhG2KISGnxk5jta8fQUdVv1v8BmjyvmkAmk2k_TlQoOa50JXBQTSXTNux_T3HIbZpW9pRbzSkEjvsu0D6sV8EqBk1Eseo2b4i2gmNgSFDpVfcbn3COfVtBxsdkq4wO444F9mpHf5Ud9lUbU1zDOeQZLcTqgcNsD")
for i in Cd:print(ord(i),end='')
cd=1036565656565661018081118751226710255110655612179107851081097155721184975511181228812274118116981225168488910012081891197784117115951197111311088121885471119111671011198672805399676512071877610295116791054599721101115272771079876691207177731091041045710279857775112669874112985386104109113107115858176113894868508469891085586999552868011011010695116971005775100987912190117116898357541219511483998110010295577881109111109119511151001171054857727077120568171786611810572119108721011098289899887995776831091081001081057911645831057481113791171145212211711212067787211212087789854521111051027480851121107811089106977452117711046710910470511141201221211117985455653100121102487311875825610412097567410510480117112679576701011018776104715075738371110120107531061169756102818510086118491185666109106121118109107651091075010795841088111179975348748866818483888478117120958451727398901128757112829812283107691061181151174868541158656691136610749691151011115098521055010310978103837068112861029998110516779102861166612011510010711352119795252527057109112721025385100571088598854912268791018190769984113103997811568
k5=int("fd539be2d750f967bff20ff0949bd9c249d3cc0f0a",16)
print(int(k5))
m=hashlib.sha256()
m.update(b"370237236854847551924324314737667639788278469365514")
m.update(b"111")
m.update(b"131")
m.update(b
m.update(b"98292172081772099545891471557513721237085526193589295873665585953952186149796862136916340285876193069396211006961459108525996575820345683024456530207214266454253574191793441478389056351341922835519484126189768975840975097100682759650415632633275759335563315705969945922007916814800188206953917590482606685030")
m.update(b"212")
S6=m.hexdigest()
print(S6)
Ce=int(cd^Sni)
print(Ce)
Sr=int(sigd^Sni)

print(Sr)
cd=int(Ce^Sni)
print(cd)
sigd=int(Sr^Sni)
print(sigd)
m=hashlib.sha256()
m.update(b"370237236854847551924324314737667639788278469365514")
m.update(b"111")
m.update(b"131")
m.update(b
m.update(b"98292172081772099545891471557513721237085526193589295873665585953952186149796862136916340285876193069396211006961459108525996575820345683024456530207214266454253574191793441478389056351341922835519484126189768975840975097100682759650415632633275759335563315705969945922007916814800188206953917590482606685030")
m.update(b"212")
s6=m.hexdigest()
print(s6)
print("true:", s6 == S6)
print("phase 4 mutual authentication between P & C")
TC11=399
TP6=899
u=67
v=78
m=hashlib.sha256()

m.update(b"234")
m.update(b"67")
WV1=m.hexdigest()
print(WV1)
wv1=int("6b7b634498ba98abe01215e28f528d8ec2fab62a174d5e96fec85ba1ada0f507",16)
print(int(wv1))
L=int(v^wv1)
print(L)
m=hashlib.sha256()
m.update(b"234")
m.update(b"67")
m.update(b"78")
m.update(b
m.update(b"98292172081772099545891471557513721237085526193589295873665585953952186149796862136916340285876193069396211006961459108525996575820345683024456530207214266454253574191793441478389056351341922835519484126189768975840975097100682759650415632633275759335563315705969945922007916814800188206953917590482606685030")
m.update(b"399")
S7=m.hexdigest()
print(S7)
v1=int(L^wv1)
print(v1)
m=hashlib.sha256()
m.update(b"234")

m.update(b"67")
m.update(b"78")
m.update(b"1036565656565661018081118751226710255110655612179107851081097155721184975511181228812274118116981225168488910012081891197784117115951197111311088121885471119111671011198672805399676512071877610295116791054599721101115272771079876691207177731091041045710279857775112669874112985386104109113107115858176113894868508469891085586999552868011011010695116971005775100987912190117116898357541219511483998110010295577881109111109119511151001171054857727077120568171786611810572119108721011098289899887995776831091081001081057911645831057481113791171145212211711212067787211212087789854521111051027480851121107811089106977452117711046710910470511141201221211117985455653100121102487311875825610412097567410510480117112679576701011018776104715075738371110120107531061169756102818510086118491185666109106121118109107651091075010795841088111179975348748866818483888478117120958451727398901128757112829812283107691061181151174868541158656691136610749691151011115098521055010310978103837068112861029998110516779102861166612011510010711352119795252527057109112721025385100571088598854912268791018190769984113103997811568")
m.update(b"98292172081772099545891471557513721237085526193589295873665585953952186149796862136916340285876193069396211006961459108525996575820345683024456530207214266454253574191793441478389056351341922835519484126189768975840975097100682759650415632633275759335563315705969945922007916814800188206953917590482606685030")
m.update(b"399")
s7=m.hexdigest()
print(s7)
print("true:", s7 == S7)
m = blake2b(digest_size=21)
m.update(b"234")
m.update(b"22")
m.update(b"33")
K5=m.hexdigest()
print(K5)
print(len(K5))
key5=K5+'0'+'='
key =key5
print (key )
print("decrption of encrypted form of MhMbMd")
input_file= 'encrypted3'
output_file='decrypted3'

with open(input_file,'rb') as f:encrypted3=f.read()
fernet=Fernet(key)
decrypted3=fernet.decrypt(encrypted3)
with open(output_file,'wb')as f:f.write(decrypted3)
f.close()
print("Signature Verification Of Md in PC")
from hashlib import sha512
hash6 = int.from_bytes(sha512(Md).digest(), byteorder='big')
hashFromSignature6 = pow(signature4, keyPair.e, keyPair.n)
print("Signature verification of Md in DC:", hash6 == hashFromSignature6)
m=hashlib.sha256()
m.update(b"370237236854847551924324314737667639788278469365514")
m.update(b"67")
m.update(b"78")
m.update(b"22")
m.update(b
m.update(b"899")
S8=m.hexdigest()
print(S8)
m=hashlib.sha256()
m.update(b"370237236854847551924324314737667639788278469365514")

m.update(b"67")
m.update(b"78")
m.update(b"22")
m.update(b
m.update(b"899")
s8=m.hexdigest()
print(s8)
print("true:", s8 == S8)